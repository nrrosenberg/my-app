{"version":3,"sources":["logo.svg","services/posts.js","components/Posts.jsx","components/Login.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","getPosts","token","a","fetch","headers","Authorization","response","json","getTopPosts","Posts","state","posts","links","fetchTopPosts","bind","localStorage","getItem","data","this","setState","Object","values","console","log","fetchPosts","map","post","i","key","freelancer","attributes","description","className","src","media","alt","likes","onClick","Component","Login","props","mailInput","React","createRef","passwordInput","mail","password","error","login","current","value","method","body","JSON","stringify","setItem","window","location","reload","removeItem","errorMsg","type","placeholder","ref","App","status","logout","changeState","changeStatus","newStatus","logoutBtn","logo","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f8ceaeab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nasync function getPosts(token) {\n    const response = await fetch('http://localhost:3000/api/posts',{\n    headers: {Authorization: `Bearer ${token}`} \n    });\n    return response.json();\n}\n\nasync function getTopPosts(token) {\n    const response = await fetch('http://localhost:3000/api/posts/top',{\n    headers: {Authorization: `Bearer ${token}`} \n    });\n    return response.json();\n}\n\nexport {getPosts, getTopPosts};","import React, {Component} from 'react';\n\n//import '../styles/navigation.css'\n//import '../styles/tables.css'\nimport {getPosts, getTopPosts} from  '../services/posts' \n\n\nclass Posts extends Component {\n    constructor(){\n      super()\n      this.state = {\n        posts: '',\n        links: '',\n      }\n      this.fetchTopPosts = this.fetchTopPosts.bind(this);\n    }\n\n    async fetchPosts() {\n        const {data, links} = await getPosts(localStorage.getItem('token'));\n        await this.setState({ posts: Object.values(data), links: links});\n      }\n    async fetchTopPosts() {\n        console.log('hola')\n        const {data, links} = await getTopPosts(localStorage.getItem('token'));\n        await this.setState({ posts: Object.values(data), links: links});\n      }\n\n    componentDidMount(){\n      this.fetchPosts()\n    }\n\n    render() {\n      let posts;\n      if (this.state.posts){\n        posts = this.state.posts.map((post, i) => {\n          console.log(this.state.posts)\n          return (\n            <tbody  key= {i}>\n              <tr>\n                <td>{post.links.freelancer}</td>\n                <td>{post.attributes.description}</td>\n                <td><img className='table-img' src={post.attributes.media} alt=\"\" /></td>\n                <td>{post.attributes.likes}</td>\n              </tr>\n            </tbody>\n          );    \n        });\n      }\n      \n      return (\n        <div>\n          <h2>Posts</h2>\n          <button onClick={this.fetchTopPosts}> Top 10 (Likes)</button>\n        \n          <table>\n            <thead>\n            <tr>\n              <th>Freelancer</th>\n              <th>Description</th>\n              <th>Media</th>\n              <th>Likes</th>\n            </tr>\n            </thead>\n            {posts}\n          </table>\n        </div>\n      );\n    }\n  }\n  \n  \n  export default Posts;","import React, { Component } from 'react';\n//import '../styles/login.css'\n\nexport default class Login extends Component {\n  constructor(props) {\n    super(props);\n    this.mailInput = React.createRef();\n    this.passwordInput = React.createRef();\n\n    this.state = {\n      mail: '',\n      password: '',\n      error: false,\n      token: '',\n    };\n\n    this.login = this.login.bind(this);\n  }\n\n\n  async login() {\n    await this.setState(\n      { mail: this.mailInput.current.value, password: this.passwordInput.current.value },\n    );\n    const data = {\n        mail: this.state.mail,\n        password: this.state.password\n    }\n    const response = await fetch('http://localhost:3000/api/auth', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n\n    const {token, error } = await response.json()\n    if (token){\n        this.setState({token: token, error: false})\n        localStorage.setItem('token', token);\n        window.location.reload(false)\n    }\n    else {\n        this.setState({token: '', error: error})\n        localStorage.removeItem('token');\n    }\n   \n  }\n\n  render() {\n    let errorMsg;\n    const { error } = this.state;\n    \n    if (error) {\n      errorMsg = <h5 className=\"errorMsg\">El correo electrónico o la contraseña se ha introducido de forma incorrecta.</h5>;\n    }\n    return (\n      <div className=\"card\">\n        <h2>Iniciar Sesión</h2>\n        {errorMsg}\n        <form>\n          <input type=\"text\" placeholder=\"Mail\" ref={this.mailInput} />\n          <input type=\"password\" placeholder=\"Contraseña\" ref={this.passwordInput} />\n          <input type=\"button\" value=\"Iniciar Sesión\" onClick={this.login} />\n        </form>\n      </div>\n    );\n  }\n}","import React, {Component} from 'react';\n\n//import './App.css';\n//import './styles/navigation.css'\nimport logo from './logo.svg';\nimport Posts from './components/Posts.jsx'\nimport Login from './components/Login.jsx'\n\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      token: '',\n      status:''\n    }\n    this.logout = this.logout.bind(this);\n    this.changeState = this.changeStatus.bind(this)\n  }\n  async componentDidMount(){\n    this.setState({token: localStorage.getItem('token'), status: localStorage.getItem('status')})\n  }\n\n  async logout() {\n    await localStorage.removeItem('token');\n    window.location.reload(false)\n  }\n\n  async changeStatus(newStatus){\n    await this.setState({status: newStatus})\n    await localStorage.setItem('status', newStatus)\n  }\n\n  render() {\n    let login;\n    \n    let logoutBtn;\n    let posts;\n    if (!this.state.token) {\n      login =  <Login/>\n    }   \n    else {\n      logoutBtn = <button className='nav-btn' onClick={this.logout}> LogOut</button> \n      if (this.state.status === 'posts'){\n        posts = <Posts/>\n\n      }\n    }\n    \n    return (\n      <div>\n        \n        <nav className='\"navbar navbar-expand-lg navbar-dark bg-dark\"'>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <button className='nav-btn' onClick={()=> this.changeStatus('posts')} >Posts</button>\n          <button className='nav-btn' onClick={()=> this.changeStatus('freelancers')} >Freelancers</button>\n          {logoutBtn}\n          </nav>\n        {posts}\n        {login}\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//import './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
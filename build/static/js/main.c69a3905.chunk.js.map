{"version":3,"sources":["logo.svg","services/posts.js","components/Posts.jsx","components/Login.jsx","services/freelancers.js","components/Freelancers.jsx","services/users.js","components/Users.jsx","services/companies.js","components/Companies.jsx","services/offers.js","components/Offers.jsx","services/services.js","components/Services.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","getPosts","token","a","fetch","headers","Authorization","response","json","data","links","Object","values","map","post","i","getFreelancerName","attributes","getTopPosts","getComments","postId","freelancerId","then","username","Posts","state","posts","comments","fetchTopPosts","bind","fetchPosts","fetchComments","fetchFreelancerName","localStorage","getItem","this","setState","console","log","freelancerUsername","key","description","className","src","media","alt","likes","onClick","id","comment","freelancer","Component","Login","props","mailInput","React","createRef","passwordInput","mail","password","error","login","current","value","method","body","JSON","stringify","setItem","window","location","reload","removeItem","errorMsg","type","placeholder","ref","getFreelancers","Freelancers","freelancers","fetchFreelancers","getUsers","Users","users","fetchUsers","user","getCompanies","Companies","companies","fetchCompanies","company","getOffers","Offers","offers","fetchOffers","offer","getServices","Services","services","fetchServices","service","name","price","picture","App","status","logout","changeState","changeStatus","newStatus","logoutBtn","logo","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c69a3905.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nasync function getPosts(token) {\n    const response = await fetch('http://arcane-cove-93049.herokuapp.com/api/posts',{\n    headers: {Authorization: `Bearer ${token}`} \n    });\n    let {data, links} = await response.json()\n    data = Object.values(data);\n    await data.map(async (post, i)=>{\n        post.attributes['freelancerUsername'] = await getFreelancerName(token ,Object.values(post.attributes)[1])\n    });\n    return {data, links}    \n}\n\nasync function getTopPosts(token) {\n    const response = await fetch('http://arcane-cove-93049.herokuapp.com/api/posts/top',{\n    headers: {Authorization: `Bearer ${token}`} \n    });\n    let {data, links} = await response.json()\n    data = await Object.values(data);\n    await data.map(async (post, i)=>{\n        post.attributes['freelancerUsername'] = await getFreelancerName(token ,Object.values(post.attributes)[1])\n        \n    });\n\n    return {data, links}\n}\n\nasync function getComments(token, postId) {\n    const response = await fetch(`http://arcane-cove-93049.herokuapp.com/api/posts/comments/${postId}`,{\n    headers: {Authorization: `Bearer ${token}`} \n    });\n    return response.json();\n}\n\nasync function getFreelancerName(token, freelancerId) {\n    let response = await fetch(`http://arcane-cove-93049.herokuapp.com/api/freelancers/show/${freelancerId}`,{\n    headers: {Authorization: `Bearer ${token}`} \n    });\n    let {data} = await response.json().then();\n    const username = Object.values(data.attributes)[3]\n    return username\n\n}\n\nexport {getPosts, getTopPosts, getComments, getFreelancerName};","import React, {Component} from 'react';\n\nimport '../styles/navigation.css'\nimport '../styles/tables.css'\nimport {getPosts, getTopPosts} from  '../services/posts' \nimport { getComments, getFreelancerName } from '../services/posts';\n//import { id } from 'postcss-selector-parser';\n\n\nclass Posts extends Component {\n    constructor(){\n      super()\n      this.state = {\n        posts: '',\n        links: '',\n        comments: '',\n      }\n      this.fetchTopPosts = this.fetchTopPosts.bind(this);\n      this.fetchPosts = this.fetchPosts.bind(this);\n      this.fetchComments = this.fetchComments.bind(this);\n      this.fetchFreelancerName = this.fetchFreelancerName.bind(this);\n    }\n\n    async fetchPosts() {\n        const {data, links} = await getPosts(localStorage.getItem('token'));\n        await this.setState({ posts: data, links: links, comments: ''});\n      }\n    async fetchTopPosts() {\n        const {data, links} = await getTopPosts(localStorage.getItem('token'));\n        await this.setState({ posts: data, links: links, comments: ''});\n      }\n      async fetchComments(postId) {\n        const {data} = await getComments(localStorage.getItem('token'), postId);\n        this.setState({ comments: data});\n      }\n      async fetchFreelancerName(freelancerId) {\n        const {data} = await getFreelancerName(localStorage.getItem('token'), freelancerId);\n        return (Object.values(data.attributes)[3])\n      }\n\n\n  render() {\n      let posts;\n      if (this.state.posts){\n        posts = this.state.posts.map((post, i) => {\n          console.log(post.attributes.freelancerUsername)\n  \n          return (\n            <tbody key= {i}>\n              <tr>\n                <td>{post.attributes.freelancerUsername}</td>\n                <td>{post.attributes.description}</td>\n                <td><img className='table-img' src={post.attributes.media} alt=\"\" /></td>\n                <td>{post.attributes.likes}</td>\n                <td><button className='btn btn-outline-light' onClick={()=>this.fetchComments(post.attributes.id)}> Comments</button></td>\n              </tr>\n            </tbody>\n          ); \n        });\n      }\n      let comments;\n      if (this.state.comments){\n        comments = this.state.comments.map((comment, i) => {\n          return (\n            <tbody  key= {i}>\n              <tr>\n                <td>{comment.attributes.freelancer}</td>\n                <td>{comment.attributes.description}</td>\n              </tr>\n            </tbody>\n          ); \n        });\n      }\n\n      return (\n        <div className='container'>\n          <h2>Posts</h2>\n          \n          <div>\n          <ul className=\"list-group list-group-horizontal-sm\">\n            <li className=\"\">\n              <button className='btn btn-outline-primary' onClick={this.fetchTopPosts}> Top 10 (Likes)</button>\n            </li>\n            <li className=\"\">\n              <button className='btn btn-outline-primary' onClick={this.fetchPosts}> Todos los Posts</button>\n              </li>\n          </ul>\n        </div>\n  \n          <table>\n            <thead>\n            <tr>\n              <th>Freelancer</th>\n              <th>Description</th>\n              <th>Media</th>\n              <th>Likes</th>\n              <th>Comentarios</th>\n            </tr>\n            </thead>\n            {posts}\n          </table>\n\n          <table>\n            <thead>\n            <tr>\n              <th>Usuario</th>\n              <th>Description</th>\n              \n            </tr>\n            </thead>\n            {comments}\n          </table>\n        </div>\n      )\n  }\n}\n  \n  \nexport default Posts;","import React, { Component } from 'react';\nimport '../styles/login.css'\n\nexport default class Login extends Component {\n  constructor(props) {\n    super(props);\n    this.mailInput = React.createRef();\n    this.passwordInput = React.createRef();\n\n    this.state = {\n      mail: '',\n      password: '',\n      error: false,\n      token: '',\n    };\n\n    this.login = this.login.bind(this);\n  }\n\n\n  async login() {\n    await this.setState(\n      { mail: this.mailInput.current.value, password: this.passwordInput.current.value },\n    );\n    const data = {\n        mail: this.state.mail,\n        password: this.state.password\n    }\n    const response = await fetch('http://arcane-cove-93049.herokuapp.com/api/auth', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n\n    const {token, error } = await response.json()\n    if (token){\n        this.setState({token: token, error: false})\n        localStorage.setItem('token', token);\n        window.location.reload(false)\n    }\n    else {\n        this.setState({token: '', error: error})\n        localStorage.removeItem('token');\n    }\n   \n  }\n\n  render() {\n    let errorMsg;\n    const { error } = this.state;\n    \n    if (error) {\n      errorMsg = <h5 className=\"errorMsg\">El correo electrónico o la contraseña se ha introducido de forma incorrecta.</h5>;\n    }\n    return (\n      <div className=\"card\">\n        <h2>Iniciar Sesión</h2>\n        {errorMsg}\n        <form>\n          <input type=\"text\" placeholder=\"Mail\" ref={this.mailInput} />\n          <input type=\"password\" placeholder=\"Contraseña\" ref={this.passwordInput} />\n          <input type=\"button\"  value= \"Iniciar Sesión\" onClick={this.login}/>\n          \n            \n        </form>\n      </div>\n    );\n  }\n}","async function getFreelancers(token) {\n    const response = await fetch('http://arcane-cove-93049.herokuapp.com/api/freelancers',{\n    headers: {Authorization: `Bearer ${token}`} \n    });\n    let {data, links} = await response.json()\n    return {data, links}    \n}\n\nexport {getFreelancers}","import React, {Component} from 'react';\n\nimport '../styles/navigation.css'\nimport '../styles/tables.css'\nimport {getFreelancers} from  '../services/freelancers' \n//import { id } from 'postcss-selector-parser';\n\n\nclass Freelancers extends Component {\n    constructor(){\n      super()\n      this.state = {\n        freelancers: '',\n        links: '',\n      }\n      this.fetchFreelancers = this.fetchFreelancers.bind(this);\n    \n    }\n\n    async fetchFreelancers() {\n        const {data, links} = await getFreelancers(localStorage.getItem('token'));\n        await this.setState({ freelancers: data, links: links});\n      }\n    \n  render() {\n      let freelancers;\n      if (this.state.freelancers){\n        freelancers = this.state.freelancers.map((freelancer, i) => {\n            const attributes = Object.values(freelancer.attributes)\n            return (\n                <tbody key= {i}>\n                <tr>\n                    <td>{attributes[1]}</td>\n                    <td>{attributes[2]}</td>\n                    <td>{attributes[3]}</td>\n                    <td>{attributes[4]}</td>\n                    <td><img className='table-img' src={attributes[5]} alt=\"\" /></td>\n                </tr>\n                </tbody>\n            ); \n        });\n      }\n\n      return (\n        <div className='container'>\n          <h2>Freelancers</h2>\n          \n          <div>\n          <ul className=\"list-group list-group-horizontal-sm\">\n            \n            <li className=\"\">\n              <button className='btn btn-outline-primary' onClick={this.fetchFreelancers}> Todos los Freelancers</button>\n              </li>\n          </ul>\n        </div>\n  \n          <table>\n            <thead>\n            <tr>\n              <th>Nombre</th>\n              <th>Apellido</th>\n              <th>Username</th>\n              <th>e-Mail</th>\n              <th>Foto de perfil</th>\n\n            </tr>\n            </thead>\n            {freelancers}\n          </table>\n        </div>\n      )\n  }\n}\n  \n  \nexport default Freelancers;","async function getUsers(token) {\n    const response = await fetch('https://arcane-cove-93049.herokuapp.com/api/users',{\n    headers: {Authorization: `Bearer ${token}`} \n    });\n    let {data, links} = await response.json()\n    return {data, links}    \n}\n\nexport {getUsers}","import React, {Component} from 'react';\n\nimport '../styles/navigation.css'\nimport '../styles/tables.css'\nimport {getUsers} from  '../services/users' \n//import { id } from 'postcss-selector-parser';\n\n\nclass Users extends Component {\n    constructor(){\n      super()\n      this.state = {\n        users: '',\n        links: '',\n      }\n      this.fetchUsers = this.fetchUsers.bind(this);\n    \n    }\n\n    async fetchUsers() {\n        const {data, links} = await getUsers(localStorage.getItem('token'));\n        await this.setState({ users: data, links: links});\n      }\n    \n  render() {\n      let users;\n      console.log(this.state.users)\n      if (this.state.users){\n        users = this.state.users.map((user, i) => {\n            const attributes = Object.values(user.attributes)\n            return (\n                <tbody key= {i}>\n                <tr>\n                    <td>{attributes[1]}</td>\n                    <td>{attributes[2]}</td>\n                    <td>{attributes[3]}</td>\n                    <td>{attributes[4]}</td>\n                    <td><img className='table-img' src={attributes[5]} alt=\"\" /></td>\n                </tr>\n                </tbody>\n            ); \n        });\n      }\n\n      return (\n        <div className='container'>\n          <h2>Users</h2>\n          \n          <div>\n          <ul className=\"list-group list-group-horizontal-sm\">\n            \n            <li className=\"\">\n              <button className='btn btn-outline-primary' onClick={this.fetchUsers}> Todos los Users</button>\n              </li>\n          </ul>\n        </div>\n  \n          <table>\n            <thead>\n            <tr>\n              <th>Nombre</th>\n              <th>Apellido</th>\n              <th>Username</th>\n              <th>e-Mail</th>\n              <th>Foto de perfil</th>\n\n            </tr>\n            </thead>\n            {users}\n          </table>\n        </div>\n      )\n  }\n}\n  \n  \nexport default Users;","async function getCompanies(token) {\n    const response = await fetch('http://arcane-cove-93049.herokuapp.com/api/companies',{\n    headers: {Authorization: `Bearer ${token}`} \n    });\n    let {data, links} = await response.json()\n    return {data, links}    \n}\n\nexport {getCompanies}","import React, {Component} from 'react';\n\nimport '../styles/navigation.css'\nimport '../styles/tables.css'\nimport {getCompanies} from  '../services/companies' \n//import { id } from 'postcss-selector-parser';\n\n\nclass Companies extends Component {\n    constructor(){\n      super()\n      this.state = {\n        companies: '',\n        links: '',\n      }\n      this.fetchCompanies = this.fetchCompanies.bind(this);\n    \n    }\n\n    async fetchCompanies() {\n        const {data, links} = await getCompanies(localStorage.getItem('token'));\n        await this.setState({ companies: data, links: links});\n      }\n    \n  render() {\n      let companies;\n      if (this.state.companies){\n        companies = this.state.companies.map((company, i) => {\n            const attributes = Object.values(company.attributes)\n            return (\n                <tbody key= {i}>\n                <tr>\n                    <td>{attributes[1]}</td>\n                    <td>{attributes[2]}</td>\n                    <td>{attributes[3]}</td>\n                    <td><img className='table-img' src={attributes[4]} alt=\"\" /></td>\n                </tr>\n                </tbody>\n            ); \n        });\n      }\n\n      return (\n        <div className='container'>\n          <h2>Empresas</h2>\n          \n          <div>\n          <ul className=\"list-group list-group-horizontal-sm\">\n            \n            <li className=\"\">\n              <button className='btn btn-outline-primary' onClick={this.fetchCompanies}> Todos las Empresas</button>\n              </li>\n          </ul>\n        </div>\n  \n          <table>\n            <thead>\n            <tr>\n              <th>Nombre</th>\n              <th>e-Mail</th>\n              <th>Descripcion</th>\n              <th>Foto de perfil</th>\n\n            </tr>\n            </thead>\n            {companies}\n          </table>\n        </div>\n      )\n  }\n}\n  \n  \nexport default Companies;","async function getOffers(token) {\n    const response = await fetch('http://arcane-cove-93049.herokuapp.com/api/offers',{\n    headers: {Authorization: `Bearer ${token}`} \n    });\n    let {data, links} = await response.json()\n    return {data, links}    \n}\n\nexport {getOffers}","import React, {Component} from 'react';\n\nimport '../styles/navigation.css'\nimport '../styles/tables.css'\nimport {getOffers} from  '../services/offers' \n//import { id } from 'postcss-selector-parser';\n\n\nclass Offers extends Component {\n    constructor(){\n      super()\n      this.state = {\n        offers: '',\n        links: '',\n      }\n      this.fetchOffers = this.fetchOffers.bind(this);\n    \n    }\n\n    async fetchOffers() {\n        const {data, links} = await getOffers(localStorage.getItem('token'));\n        await this.setState({ offers: data, links: links});\n      }\n    \n  render() {\n      let offers;\n      console.log(this.state.offers)\n      if (this.state.offers){\n        offers = this.state.offers.map((offer, i) => {\n            const attributes = Object.values(offer.attributes)\n            return (\n                <tbody key= {i}>\n                <tr>\n                    <td>{attributes[1]}</td>\n                    <td>{attributes[2]}</td>\n                    <td> ${attributes[3]}</td>\n                    <td>{attributes[4]}</td>\n                </tr>\n                </tbody>\n            ); \n        });\n      }\n\n      return (\n        <div className='container'>\n          <h2>Ofertas de trabajo</h2>\n          \n          <div>\n          <ul className=\"list-group list-group-horizontal-sm\">\n            \n            <li className=\"\">\n              <button className='btn btn-outline-primary' onClick={this.fetchOffers}> Todos las Ofertas</button>\n              </li>\n          </ul>\n        </div>\n  \n          <table>\n            <thead>\n            <tr>\n              <th>Empresa Id</th>\n              <th>Nombre</th>\n              <th>Salario</th>\n              <th>Vacantes</th>\n\n            </tr>\n            </thead>\n            {offers}\n          </table>\n        </div>\n      )\n  }\n}\n  \n  \nexport default Offers;","async function getServices(token) {\n    let response = await fetch('http://arcane-cove-93049.herokuapp.com/api/services',{\n    headers: {Authorization: `Bearer ${token}`} \n    });\n    response = await response.json()\n    return response\n       \n}\n\nexport {getServices}    ","import React, {Component} from 'react';\n\nimport '../styles/navigation.css'\nimport '../styles/tables.css'\nimport {getServices} from  '../services/services' \n//import { id } from 'postcss-selector-parser';\n\n\nclass Services extends Component {\n    constructor(){\n      super()\n      this.state = {\n        services: '',\n        links: '',\n      }\n      this.fetchServices = this.fetchServices.bind(this);\n    \n    }\n\n    async fetchServices() {\n        let data = await getServices(localStorage.getItem('token'));\n        await this.setState({ services: data, links: ''});\n        console.log(data[0])\n\n        \n      }\n    \n  render() {\n      let services;\n      \n      if (this.state.services){\n        services = this.state.services.map((service, i) => {\n            \n            return (\n                <tbody key= {i}>\n                <tr>\n                    <td>{service.freelancerUsername}</td>\n                    <td>{service.name}</td>\n                    <td> {service.description}</td>\n                    <td>${service.price}</td>\n                    <td><img className='table-img' src={service.picture} alt=\"\" /></td>\n             \n                </tr>\n                </tbody>\n            ); \n        });\n      }\n\n      return (\n        <div className='container'>\n          <h2>Servicios ofrecidos por freelancers</h2>\n          \n          <div>\n          <ul className=\"list-group list-group-horizontal-sm\">\n            \n            <li className=\"\">\n              <button className='btn btn-outline-primary' onClick={this.fetchServices}> Todos los Servicios</button>\n              </li>\n          </ul>\n        </div>\n  \n          <table>\n            <thead>\n            <tr>\n              <th>Freelancer</th>\n              <th>Nombre</th>\n              <th>Descripcion</th>\n              <th>precio</th>\n              <th>Foto</th>\n              \n\n            </tr>\n            </thead>\n            {services}\n          </table>\n        </div>\n      )\n  }\n}\n  \n  \nexport default Services;","import React, {Component} from 'react';\n\nimport './App.css';\nimport './styles/navigation.css'\nimport logo from './logo.svg';\nimport Posts from './components/Posts.jsx'\nimport Login from './components/Login.jsx'\nimport Freelancers from './components/Freelancers.jsx'\nimport Users from './components/Users.jsx'\nimport Companies from './components/Companies.jsx'\nimport Offers from './components/Offers.jsx'\nimport Services from './components/Services.jsx'\n\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      token: '',\n      status:''\n    }\n    this.logout = this.logout.bind(this);\n    this.changeState = this.changeStatus.bind(this)\n  }\n  async componentDidMount(){\n    this.setState({token: localStorage.getItem('token'), status: localStorage.getItem('status')})\n  }\n\n  async logout() {\n    await localStorage.removeItem('token');\n    window.location.reload(false)\n  }\n\n  async changeStatus(newStatus){\n    await this.setState({status: newStatus})\n    await localStorage.setItem('status', newStatus)\n  }\n\n  render() {\n    let login;\n    let offers\n    let logoutBtn;\n    let posts;\n    let freelancers;\n    let users;\n    let companies\n    let services\n    if (!this.state.token) {\n      login =  <Login/>\n    }   \n    else {\n      logoutBtn = <button className='btn btn-outline-danger ml-auto' onClick={this.logout}> LogOut</button> \n      if (this.state.status === 'posts'){\n        posts = <Posts/>\n      }\n      else if (this.state.status === 'freelancers'){\n        freelancers = <Freelancers/>\n      }\n      else if (this.state.status === 'users'){\n        users = <Users/>\n      }\n      else if (this.state.status === 'companies'){\n        companies = <Companies/>\n      }\n      else if (this.state.status === 'offers'){\n        offers = <Offers/>\n      }\n      else if (this.state.status === 'services'){\n        services = <Services/>\n      }\n    }\n    \n    return (\n      <div>\n        \n        <nav className='navbar navbar-expand-lg navbar-dark bg-dark'>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n              <button className='btn btn-outline-light' onClick={()=> this.changeStatus('posts')} >Posts</button>\n              <button className='btn btn-outline-light' onClick={()=> this.changeStatus('freelancers')} >Freelancers</button>\n              <button className='btn btn-outline-light' onClick={()=> this.changeStatus('users')} >Users</button>\n              <button className='btn btn-outline-light' onClick={()=> this.changeStatus('companies')} >Empresas</button>\n              <button className='btn btn-outline-light' onClick={()=> this.changeStatus('offers')} >Ofertas</button>\n              <button className='btn btn-outline-light' onClick={()=> this.changeStatus('services')} >Servicios</button>\n            \n          \n          {logoutBtn}\n          </nav>\n        {posts}\n        {login}\n        {freelancers}\n        {users}\n        {companies}\n        {offers}\n        {services}\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
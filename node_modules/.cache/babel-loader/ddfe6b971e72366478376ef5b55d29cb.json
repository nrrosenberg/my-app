{"ast":null,"code":"'use strict';\n\nvar Methods = {\n  pluralize: function (word, locale) {\n    locale = locale || 'en';\n    return this._applyInflections(word, this.inflections(locale).plurals);\n  },\n  singularize: function (word, locale) {\n    locale = locale || 'en';\n    return this._applyInflections(word, this.inflections(locale).singulars);\n  },\n  camelize: function (term, uppercaseFirstLetter) {\n    if (uppercaseFirstLetter === null || uppercaseFirstLetter === undefined) {\n      uppercaseFirstLetter = true;\n    }\n\n    var result = '' + term,\n        self = this;\n\n    if (uppercaseFirstLetter) {\n      result = result.replace(/^[a-z\\d]*/, function (a) {\n        return self.inflections().acronyms[a] || self.capitalize(a);\n      });\n    } else {\n      result = result.replace(new RegExp('^(?:' + this.inflections().acronymRegex.source + '(?=\\\\b|[A-Z_])|\\\\w)'), function (a) {\n        return a.toLowerCase();\n      });\n    }\n\n    result = result.replace(/(?:_|(\\/))([a-z\\d]*)/gi, function (match, a, b, idx, string) {\n      a || (a = '');\n      return '' + a + (self.inflections().acronyms[b] || self.capitalize(b));\n    });\n    return result;\n  },\n  underscore: function (camelCasedWord) {\n    var result = '' + camelCasedWord;\n    result = result.replace(new RegExp('(?:([A-Za-z\\\\d])|^)(' + this.inflections().acronymRegex.source + ')(?=\\\\b|[^a-z])', 'g'), function (match, $1, $2) {\n      return '' + ($1 || '') + ($1 ? '_' : '') + $2.toLowerCase();\n    });\n    result = result.replace(/([A-Z\\d]+)([A-Z][a-z])/g, '$1_$2');\n    result = result.replace(/([a-z\\d])([A-Z])/g, '$1_$2');\n    result = result.replace(/-/g, '_');\n    return result.toLowerCase();\n  },\n  humanize: function (lowerCaseAndUnderscoredWord, options) {\n    var result = '' + lowerCaseAndUnderscoredWord;\n    var humans = this.inflections().humans;\n    var human, rule, replacement;\n    var self = this;\n    options = options || {};\n\n    if (options.capitalize === null || options.capitalize === undefined) {\n      options.capitalize = true;\n    }\n\n    for (var i = 0, ii = humans.length; i < ii; i++) {\n      human = humans[i];\n      rule = human[0];\n      replacement = human[1];\n\n      if (rule.test && rule.test(result) || result.indexOf(rule) > -1) {\n        result = result.replace(rule, replacement);\n        break;\n      }\n    }\n\n    result = result.replace(/_id$/, '');\n    result = result.replace(/_/g, ' ');\n    result = result.replace(/([a-z\\d]*)/gi, function (match) {\n      return self.inflections().acronyms[match] || match.toLowerCase();\n    });\n\n    if (options.capitalize) {\n      result = result.replace(/^\\w/, function (match) {\n        return match.toUpperCase();\n      });\n    }\n\n    return result;\n  },\n  capitalize: function (str) {\n    var result = str === null || str === undefined ? '' : String(str);\n    return result.charAt(0).toUpperCase() + result.slice(1);\n  },\n  titleize: function (word) {\n    return this.humanize(this.underscore(word)).replace(/(^|[\\sÂ¿\\/]+)([a-z])/g, function (match, boundary, letter, idx, string) {\n      return match.replace(letter, letter.toUpperCase());\n    });\n  },\n  tableize: function (className) {\n    return this.pluralize(this.underscore(className));\n  },\n  classify: function (tableName) {\n    return this.camelize(this.singularize(tableName.replace(/.*\\./g, '')));\n  },\n  dasherize: function (underscoredWord) {\n    return underscoredWord.replace(/_/g, '-');\n  },\n  foreignKey: function (className, separateWithUnderscore) {\n    if (separateWithUnderscore === null || separateWithUnderscore === undefined) {\n      separateWithUnderscore = true;\n    }\n\n    return this.underscore(className) + (separateWithUnderscore ? '_id' : 'id');\n  },\n  ordinal: function (number) {\n    var absNumber = Math.abs(Number(number));\n    var mod100 = absNumber % 100;\n\n    if (mod100 === 11 || mod100 === 12 || mod100 === 13) {\n      return 'th';\n    } else {\n      switch (absNumber % 10) {\n        case 1:\n          return 'st';\n\n        case 2:\n          return 'nd';\n\n        case 3:\n          return 'rd';\n\n        default:\n          return 'th';\n      }\n    }\n  },\n  ordinalize: function (number) {\n    return '' + number + this.ordinal(number);\n  },\n  transliterate: function (string, options) {\n    options = options || {};\n    var locale = options.locale || 'en';\n    var replacement = options.replacement || '?';\n    return this.transliterations(locale).transliterate(string, replacement);\n  },\n  parameterize: function (string, options) {\n    options = options || {};\n\n    if (options.separator === undefined) {\n      options.separator = '-';\n    }\n\n    if (options.separator === null) {\n      options.separator = '';\n    } // replace accented chars with their ascii equivalents\n\n\n    var result = this.transliterate(string, options);\n    result = result.replace(/[^a-z0-9\\-_]+/ig, options.separator);\n\n    if (options.separator.length) {\n      var separatorRegex = new RegExp(options.separator); // no more than one of the separator in a row\n\n      result = result.replace(new RegExp(separatorRegex.source + '{2,}'), options.separator); // remove leading/trailing separator\n\n      result = result.replace(new RegExp('^' + separatorRegex.source + '|' + separatorRegex.source + '$', 'i'), '');\n    }\n\n    return result.toLowerCase();\n  },\n  _applyInflections: function (word, rules) {\n    var result = '' + word,\n        rule,\n        regex,\n        replacement;\n\n    if (result.length === 0) {\n      return result;\n    } else {\n      var match = result.toLowerCase().match(/\\b\\w+$/);\n\n      if (match && this.inflections().uncountables.indexOf(match[0]) > -1) {\n        return result;\n      } else {\n        for (var i = 0, ii = rules.length; i < ii; i++) {\n          rule = rules[i];\n          regex = rule[0];\n          replacement = rule[1];\n\n          if (result.match(regex)) {\n            result = result.replace(regex, replacement);\n            break;\n          }\n        }\n\n        return result;\n      }\n    }\n  }\n};\nmodule.exports = Methods;","map":{"version":3,"sources":["/Users/nicorosenberg/Desktop/grupo-belicooo/my-app/node_modules/inflected/lib/Methods.js"],"names":["Methods","pluralize","word","locale","_applyInflections","inflections","plurals","singularize","singulars","camelize","term","uppercaseFirstLetter","undefined","result","self","replace","a","acronyms","capitalize","RegExp","acronymRegex","source","toLowerCase","match","b","idx","string","underscore","camelCasedWord","$1","$2","humanize","lowerCaseAndUnderscoredWord","options","humans","human","rule","replacement","i","ii","length","test","indexOf","toUpperCase","str","String","charAt","slice","titleize","boundary","letter","tableize","className","classify","tableName","dasherize","underscoredWord","foreignKey","separateWithUnderscore","ordinal","number","absNumber","Math","abs","Number","mod100","ordinalize","transliterate","transliterations","parameterize","separator","separatorRegex","rules","regex","uncountables","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAG;AACZC,EAAAA,SAAS,EAAE,UAASC,IAAT,EAAeC,MAAf,EAAuB;AAChCA,IAAAA,MAAM,GAAGA,MAAM,IAAI,IAAnB;AAEA,WAAO,KAAKC,iBAAL,CAAuBF,IAAvB,EAA6B,KAAKG,WAAL,CAAiBF,MAAjB,EAAyBG,OAAtD,CAAP;AACD,GALW;AAOZC,EAAAA,WAAW,EAAE,UAASL,IAAT,EAAeC,MAAf,EAAuB;AAClCA,IAAAA,MAAM,GAAGA,MAAM,IAAI,IAAnB;AAEA,WAAO,KAAKC,iBAAL,CAAuBF,IAAvB,EAA6B,KAAKG,WAAL,CAAiBF,MAAjB,EAAyBK,SAAtD,CAAP;AACD,GAXW;AAaZC,EAAAA,QAAQ,EAAE,UAASC,IAAT,EAAeC,oBAAf,EAAqC;AAC7C,QAAIA,oBAAoB,KAAK,IAAzB,IAAiCA,oBAAoB,KAAKC,SAA9D,EAAyE;AACvED,MAAAA,oBAAoB,GAAG,IAAvB;AACD;;AAED,QAAIE,MAAM,GAAG,KAAKH,IAAlB;AAAA,QAAwBI,IAAI,GAAG,IAA/B;;AAEA,QAAIH,oBAAJ,EAA0B;AACxBE,MAAAA,MAAM,GAAGA,MAAM,CAACE,OAAP,CAAe,WAAf,EAA4B,UAASC,CAAT,EAAY;AAC/C,eAAOF,IAAI,CAACT,WAAL,GAAmBY,QAAnB,CAA4BD,CAA5B,KAAkCF,IAAI,CAACI,UAAL,CAAgBF,CAAhB,CAAzC;AACD,OAFQ,CAAT;AAGD,KAJD,MAIO;AACLH,MAAAA,MAAM,GAAGA,MAAM,CAACE,OAAP,CAAe,IAAII,MAAJ,CAAW,SAAS,KAAKd,WAAL,GAAmBe,YAAnB,CAAgCC,MAAzC,GAAkD,qBAA7D,CAAf,EAAoG,UAASL,CAAT,EAAY;AACvH,eAAOA,CAAC,CAACM,WAAF,EAAP;AACD,OAFQ,CAAT;AAGD;;AAEDT,IAAAA,MAAM,GAAGA,MAAM,CAACE,OAAP,CAAe,wBAAf,EAAyC,UAASQ,KAAT,EAAgBP,CAAhB,EAAmBQ,CAAnB,EAAsBC,GAAtB,EAA2BC,MAA3B,EAAmC;AACnFV,MAAAA,CAAC,KAAKA,CAAC,GAAG,EAAT,CAAD;AACA,aAAO,KAAKA,CAAL,IAAUF,IAAI,CAACT,WAAL,GAAmBY,QAAnB,CAA4BO,CAA5B,KAAkCV,IAAI,CAACI,UAAL,CAAgBM,CAAhB,CAA5C,CAAP;AACD,KAHQ,CAAT;AAKA,WAAOX,MAAP;AACD,GApCW;AAsCZc,EAAAA,UAAU,EAAE,UAASC,cAAT,EAAyB;AACnC,QAAIf,MAAM,GAAG,KAAKe,cAAlB;AAEAf,IAAAA,MAAM,GAAGA,MAAM,CAACE,OAAP,CAAe,IAAII,MAAJ,CAAW,yBAAyB,KAAKd,WAAL,GAAmBe,YAAnB,CAAgCC,MAAzD,GAAkE,iBAA7E,EAAgG,GAAhG,CAAf,EAAqH,UAASE,KAAT,EAAgBM,EAAhB,EAAoBC,EAApB,EAAwB;AACpJ,aAAO,MAAMD,EAAE,IAAI,EAAZ,KAAmBA,EAAE,GAAG,GAAH,GAAS,EAA9B,IAAoCC,EAAE,CAACR,WAAH,EAA3C;AACD,KAFQ,CAAT;AAIAT,IAAAA,MAAM,GAAGA,MAAM,CAACE,OAAP,CAAe,yBAAf,EAA0C,OAA1C,CAAT;AACAF,IAAAA,MAAM,GAAGA,MAAM,CAACE,OAAP,CAAe,mBAAf,EAAoC,OAApC,CAAT;AACAF,IAAAA,MAAM,GAAGA,MAAM,CAACE,OAAP,CAAe,IAAf,EAAqB,GAArB,CAAT;AAEA,WAAOF,MAAM,CAACS,WAAP,EAAP;AACD,GAlDW;AAoDZS,EAAAA,QAAQ,EAAE,UAASC,2BAAT,EAAsCC,OAAtC,EAA+C;AACvD,QAAIpB,MAAM,GAAG,KAAKmB,2BAAlB;AACA,QAAIE,MAAM,GAAG,KAAK7B,WAAL,GAAmB6B,MAAhC;AACA,QAAIC,KAAJ,EAAWC,IAAX,EAAiBC,WAAjB;AACA,QAAIvB,IAAI,GAAG,IAAX;AAEAmB,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,QAAIA,OAAO,CAACf,UAAR,KAAuB,IAAvB,IAA+Be,OAAO,CAACf,UAAR,KAAuBN,SAA1D,EAAqE;AACnEqB,MAAAA,OAAO,CAACf,UAAR,GAAqB,IAArB;AACD;;AAED,SAAK,IAAIoB,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGL,MAAM,CAACM,MAA5B,EAAoCF,CAAC,GAAGC,EAAxC,EAA4CD,CAAC,EAA7C,EAAiD;AAC/CH,MAAAA,KAAK,GAAGD,MAAM,CAACI,CAAD,CAAd;AACAF,MAAAA,IAAI,GAAGD,KAAK,CAAC,CAAD,CAAZ;AACAE,MAAAA,WAAW,GAAGF,KAAK,CAAC,CAAD,CAAnB;;AAEA,UAAIC,IAAI,CAACK,IAAL,IAAaL,IAAI,CAACK,IAAL,CAAU5B,MAAV,CAAb,IAAkCA,MAAM,CAAC6B,OAAP,CAAeN,IAAf,IAAuB,CAAC,CAA9D,EAAiE;AAC/DvB,QAAAA,MAAM,GAAGA,MAAM,CAACE,OAAP,CAAeqB,IAAf,EAAqBC,WAArB,CAAT;AACA;AACD;AACF;;AAEDxB,IAAAA,MAAM,GAAGA,MAAM,CAACE,OAAP,CAAe,MAAf,EAAuB,EAAvB,CAAT;AACAF,IAAAA,MAAM,GAAGA,MAAM,CAACE,OAAP,CAAe,IAAf,EAAqB,GAArB,CAAT;AAEAF,IAAAA,MAAM,GAAGA,MAAM,CAACE,OAAP,CAAe,cAAf,EAA+B,UAASQ,KAAT,EAAgB;AACtD,aAAOT,IAAI,CAACT,WAAL,GAAmBY,QAAnB,CAA4BM,KAA5B,KAAsCA,KAAK,CAACD,WAAN,EAA7C;AACD,KAFQ,CAAT;;AAIA,QAAIW,OAAO,CAACf,UAAZ,EAAwB;AACtBL,MAAAA,MAAM,GAAGA,MAAM,CAACE,OAAP,CAAe,KAAf,EAAsB,UAASQ,KAAT,EAAgB;AAC7C,eAAOA,KAAK,CAACoB,WAAN,EAAP;AACD,OAFQ,CAAT;AAGD;;AAED,WAAO9B,MAAP;AACD,GAzFW;AA2FZK,EAAAA,UAAU,EAAE,UAAS0B,GAAT,EAAc;AACxB,QAAI/B,MAAM,GAAG+B,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAKhC,SAAxB,GAAoC,EAApC,GAAyCiC,MAAM,CAACD,GAAD,CAA5D;AACA,WAAO/B,MAAM,CAACiC,MAAP,CAAc,CAAd,EAAiBH,WAAjB,KAAiC9B,MAAM,CAACkC,KAAP,CAAa,CAAb,CAAxC;AACD,GA9FW;AAgGZC,EAAAA,QAAQ,EAAE,UAAS9C,IAAT,EAAe;AACvB,WAAO,KAAK6B,QAAL,CAAc,KAAKJ,UAAL,CAAgBzB,IAAhB,CAAd,EAAqCa,OAArC,CAA6C,sBAA7C,EAAqE,UAASQ,KAAT,EAAgB0B,QAAhB,EAA0BC,MAA1B,EAAkCzB,GAAlC,EAAuCC,MAAvC,EAA+C;AACzH,aAAOH,KAAK,CAACR,OAAN,CAAcmC,MAAd,EAAsBA,MAAM,CAACP,WAAP,EAAtB,CAAP;AACD,KAFM,CAAP;AAGD,GApGW;AAsGZQ,EAAAA,QAAQ,EAAE,UAASC,SAAT,EAAoB;AAC5B,WAAO,KAAKnD,SAAL,CAAe,KAAK0B,UAAL,CAAgByB,SAAhB,CAAf,CAAP;AACD,GAxGW;AA0GZC,EAAAA,QAAQ,EAAE,UAASC,SAAT,EAAoB;AAC5B,WAAO,KAAK7C,QAAL,CAAc,KAAKF,WAAL,CAAiB+C,SAAS,CAACvC,OAAV,CAAkB,OAAlB,EAA2B,EAA3B,CAAjB,CAAd,CAAP;AACD,GA5GW;AA8GZwC,EAAAA,SAAS,EAAE,UAASC,eAAT,EAA0B;AACnC,WAAOA,eAAe,CAACzC,OAAhB,CAAwB,IAAxB,EAA8B,GAA9B,CAAP;AACD,GAhHW;AAkHZ0C,EAAAA,UAAU,EAAE,UAASL,SAAT,EAAoBM,sBAApB,EAA4C;AACtD,QAAIA,sBAAsB,KAAK,IAA3B,IAAmCA,sBAAsB,KAAK9C,SAAlE,EAA6E;AAC3E8C,MAAAA,sBAAsB,GAAG,IAAzB;AACD;;AAED,WAAO,KAAK/B,UAAL,CAAgByB,SAAhB,KAA8BM,sBAAsB,GAAG,KAAH,GAAW,IAA/D,CAAP;AACD,GAxHW;AA0HZC,EAAAA,OAAO,EAAE,UAASC,MAAT,EAAiB;AACxB,QAAIC,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASC,MAAM,CAACJ,MAAD,CAAf,CAAhB;AACA,QAAIK,MAAM,GAAGJ,SAAS,GAAG,GAAzB;;AAEA,QAAII,MAAM,KAAK,EAAX,IAAiBA,MAAM,KAAK,EAA5B,IAAkCA,MAAM,KAAK,EAAjD,EAAqD;AACnD,aAAO,IAAP;AACD,KAFD,MAEO;AACL,cAAQJ,SAAS,GAAG,EAApB;AACE,aAAK,CAAL;AAAQ,iBAAO,IAAP;;AACR,aAAK,CAAL;AAAQ,iBAAO,IAAP;;AACR,aAAK,CAAL;AAAQ,iBAAO,IAAP;;AACR;AAAS,iBAAO,IAAP;AAJX;AAMD;AACF,GAxIW;AA0IZK,EAAAA,UAAU,EAAE,UAASN,MAAT,EAAiB;AAC3B,WAAO,KAAKA,MAAL,GAAc,KAAKD,OAAL,CAAaC,MAAb,CAArB;AACD,GA5IW;AA8IZO,EAAAA,aAAa,EAAE,UAASzC,MAAT,EAAiBO,OAAjB,EAA0B;AACvCA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,QAAI9B,MAAM,GAAQ8B,OAAO,CAAC9B,MAAR,IAAkB,IAApC;AACA,QAAIkC,WAAW,GAAGJ,OAAO,CAACI,WAAR,IAAuB,GAAzC;AAEA,WAAO,KAAK+B,gBAAL,CAAsBjE,MAAtB,EAA8BgE,aAA9B,CAA4CzC,MAA5C,EAAoDW,WAApD,CAAP;AACD,GArJW;AAuJZgC,EAAAA,YAAY,EAAE,UAAS3C,MAAT,EAAiBO,OAAjB,EAA0B;AACtCA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,QAAIA,OAAO,CAACqC,SAAR,KAAsB1D,SAA1B,EAAqC;AACnCqB,MAAAA,OAAO,CAACqC,SAAR,GAAoB,GAApB;AACD;;AAED,QAAIrC,OAAO,CAACqC,SAAR,KAAsB,IAA1B,EAAgC;AAC9BrC,MAAAA,OAAO,CAACqC,SAAR,GAAoB,EAApB;AACD,KATqC,CAWtC;;;AACA,QAAIzD,MAAM,GAAG,KAAKsD,aAAL,CAAmBzC,MAAnB,EAA2BO,OAA3B,CAAb;AAEApB,IAAAA,MAAM,GAAGA,MAAM,CAACE,OAAP,CAAe,iBAAf,EAAkCkB,OAAO,CAACqC,SAA1C,CAAT;;AAEA,QAAIrC,OAAO,CAACqC,SAAR,CAAkB9B,MAAtB,EAA8B;AAC5B,UAAI+B,cAAc,GAAG,IAAIpD,MAAJ,CAAWc,OAAO,CAACqC,SAAnB,CAArB,CAD4B,CAG5B;;AACAzD,MAAAA,MAAM,GAAGA,MAAM,CAACE,OAAP,CAAe,IAAII,MAAJ,CAAWoD,cAAc,CAAClD,MAAf,GAAwB,MAAnC,CAAf,EAA2DY,OAAO,CAACqC,SAAnE,CAAT,CAJ4B,CAM5B;;AACAzD,MAAAA,MAAM,GAAGA,MAAM,CAACE,OAAP,CAAe,IAAII,MAAJ,CAAW,MAAMoD,cAAc,CAAClD,MAArB,GAA8B,GAA9B,GAAoCkD,cAAc,CAAClD,MAAnD,GAA4D,GAAvE,EAA4E,GAA5E,CAAf,EAAiG,EAAjG,CAAT;AACD;;AAED,WAAOR,MAAM,CAACS,WAAP,EAAP;AACD,GAlLW;AAoLZlB,EAAAA,iBAAiB,EAAE,UAASF,IAAT,EAAesE,KAAf,EAAsB;AACvC,QAAI3D,MAAM,GAAG,KAAKX,IAAlB;AAAA,QAAwBkC,IAAxB;AAAA,QAA8BqC,KAA9B;AAAA,QAAqCpC,WAArC;;AAEA,QAAIxB,MAAM,CAAC2B,MAAP,KAAkB,CAAtB,EAAyB;AACvB,aAAO3B,MAAP;AACD,KAFD,MAEO;AACL,UAAIU,KAAK,GAAGV,MAAM,CAACS,WAAP,GAAqBC,KAArB,CAA2B,QAA3B,CAAZ;;AAEA,UAAIA,KAAK,IAAI,KAAKlB,WAAL,GAAmBqE,YAAnB,CAAgChC,OAAhC,CAAwCnB,KAAK,CAAC,CAAD,CAA7C,IAAoD,CAAC,CAAlE,EAAqE;AACnE,eAAOV,MAAP;AACD,OAFD,MAEO;AACL,aAAK,IAAIyB,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGiC,KAAK,CAAChC,MAA3B,EAAmCF,CAAC,GAAGC,EAAvC,EAA2CD,CAAC,EAA5C,EAAgD;AAC9CF,UAAAA,IAAI,GAAGoC,KAAK,CAAClC,CAAD,CAAZ;AAEAmC,UAAAA,KAAK,GAAGrC,IAAI,CAAC,CAAD,CAAZ;AACAC,UAAAA,WAAW,GAAGD,IAAI,CAAC,CAAD,CAAlB;;AAEA,cAAIvB,MAAM,CAACU,KAAP,CAAakD,KAAb,CAAJ,EAAyB;AACvB5D,YAAAA,MAAM,GAAGA,MAAM,CAACE,OAAP,CAAe0D,KAAf,EAAsBpC,WAAtB,CAAT;AACA;AACD;AACF;;AAED,eAAOxB,MAAP;AACD;AACF;AACF;AA9MW,CAAd;AAiNA8D,MAAM,CAACC,OAAP,GAAiB5E,OAAjB","sourcesContent":["'use strict';\n\nvar Methods = {\n  pluralize: function(word, locale) {\n    locale = locale || 'en';\n\n    return this._applyInflections(word, this.inflections(locale).plurals);\n  },\n\n  singularize: function(word, locale) {\n    locale = locale || 'en';\n\n    return this._applyInflections(word, this.inflections(locale).singulars);\n  },\n\n  camelize: function(term, uppercaseFirstLetter) {\n    if (uppercaseFirstLetter === null || uppercaseFirstLetter === undefined) {\n      uppercaseFirstLetter = true;\n    }\n\n    var result = '' + term, self = this;\n\n    if (uppercaseFirstLetter) {\n      result = result.replace(/^[a-z\\d]*/, function(a) {\n        return self.inflections().acronyms[a] || self.capitalize(a);\n      });\n    } else {\n      result = result.replace(new RegExp('^(?:' + this.inflections().acronymRegex.source + '(?=\\\\b|[A-Z_])|\\\\w)'), function(a) {\n        return a.toLowerCase();\n      });\n    }\n\n    result = result.replace(/(?:_|(\\/))([a-z\\d]*)/gi, function(match, a, b, idx, string) {\n      a || (a = '');\n      return '' + a + (self.inflections().acronyms[b] || self.capitalize(b));\n    });\n\n    return result;\n  },\n\n  underscore: function(camelCasedWord) {\n    var result = '' + camelCasedWord;\n\n    result = result.replace(new RegExp('(?:([A-Za-z\\\\d])|^)(' + this.inflections().acronymRegex.source + ')(?=\\\\b|[^a-z])', 'g'), function(match, $1, $2) {\n      return '' + ($1 || '') + ($1 ? '_' : '') + $2.toLowerCase();\n    });\n\n    result = result.replace(/([A-Z\\d]+)([A-Z][a-z])/g, '$1_$2');\n    result = result.replace(/([a-z\\d])([A-Z])/g, '$1_$2');\n    result = result.replace(/-/g, '_');\n\n    return result.toLowerCase();\n  },\n\n  humanize: function(lowerCaseAndUnderscoredWord, options) {\n    var result = '' + lowerCaseAndUnderscoredWord;\n    var humans = this.inflections().humans;\n    var human, rule, replacement;\n    var self = this;\n\n    options = options || {};\n\n    if (options.capitalize === null || options.capitalize === undefined) {\n      options.capitalize = true;\n    }\n\n    for (var i = 0, ii = humans.length; i < ii; i++) {\n      human = humans[i];\n      rule = human[0];\n      replacement = human[1];\n\n      if (rule.test && rule.test(result) || result.indexOf(rule) > -1) {\n        result = result.replace(rule, replacement);\n        break;\n      }\n    }\n\n    result = result.replace(/_id$/, '');\n    result = result.replace(/_/g, ' ');\n\n    result = result.replace(/([a-z\\d]*)/gi, function(match) {\n      return self.inflections().acronyms[match] || match.toLowerCase();\n    });\n\n    if (options.capitalize) {\n      result = result.replace(/^\\w/, function(match) {\n        return match.toUpperCase();\n      });\n    }\n\n    return result;\n  },\n\n  capitalize: function(str) {\n    var result = str === null || str === undefined ? '' : String(str);\n    return result.charAt(0).toUpperCase() + result.slice(1);\n  },\n\n  titleize: function(word) {\n    return this.humanize(this.underscore(word)).replace(/(^|[\\sÂ¿\\/]+)([a-z])/g, function(match, boundary, letter, idx, string) {\n      return match.replace(letter, letter.toUpperCase());\n    });\n  },\n\n  tableize: function(className) {\n    return this.pluralize(this.underscore(className));\n  },\n\n  classify: function(tableName) {\n    return this.camelize(this.singularize(tableName.replace(/.*\\./g, '')));\n  },\n\n  dasherize: function(underscoredWord) {\n    return underscoredWord.replace(/_/g, '-');\n  },\n\n  foreignKey: function(className, separateWithUnderscore) {\n    if (separateWithUnderscore === null || separateWithUnderscore === undefined) {\n      separateWithUnderscore = true;\n    }\n\n    return this.underscore(className) + (separateWithUnderscore ? '_id' : 'id');\n  },\n\n  ordinal: function(number) {\n    var absNumber = Math.abs(Number(number));\n    var mod100 = absNumber % 100;\n\n    if (mod100 === 11 || mod100 === 12 || mod100 === 13) {\n      return 'th';\n    } else {\n      switch (absNumber % 10) {\n        case 1: return 'st';\n        case 2: return 'nd';\n        case 3: return 'rd';\n        default: return 'th';\n      }\n    }\n  },\n\n  ordinalize: function(number) {\n    return '' + number + this.ordinal(number);\n  },\n\n  transliterate: function(string, options) {\n    options = options || {};\n\n    var locale      = options.locale || 'en';\n    var replacement = options.replacement || '?';\n\n    return this.transliterations(locale).transliterate(string, replacement);\n  },\n\n  parameterize: function(string, options) {\n    options = options || {};\n\n    if (options.separator === undefined) {\n      options.separator = '-';\n    }\n\n    if (options.separator === null) {\n      options.separator = '';\n    }\n\n    // replace accented chars with their ascii equivalents\n    var result = this.transliterate(string, options);\n\n    result = result.replace(/[^a-z0-9\\-_]+/ig, options.separator);\n\n    if (options.separator.length) {\n      var separatorRegex = new RegExp(options.separator);\n\n      // no more than one of the separator in a row\n      result = result.replace(new RegExp(separatorRegex.source + '{2,}'), options.separator);\n\n      // remove leading/trailing separator\n      result = result.replace(new RegExp('^' + separatorRegex.source + '|' + separatorRegex.source + '$', 'i'), '');\n    }\n\n    return result.toLowerCase();\n  },\n\n  _applyInflections: function(word, rules) {\n    var result = '' + word, rule, regex, replacement;\n\n    if (result.length === 0) {\n      return result;\n    } else {\n      var match = result.toLowerCase().match(/\\b\\w+$/);\n\n      if (match && this.inflections().uncountables.indexOf(match[0]) > -1) {\n        return result;\n      } else {\n        for (var i = 0, ii = rules.length; i < ii; i++) {\n          rule = rules[i];\n\n          regex = rule[0];\n          replacement = rule[1];\n\n          if (result.match(regex)) {\n            result = result.replace(regex, replacement);\n            break;\n          }\n        }\n\n        return result;\n      }\n    }\n  }\n};\n\nmodule.exports = Methods;\n"]},"metadata":{},"sourceType":"script"}
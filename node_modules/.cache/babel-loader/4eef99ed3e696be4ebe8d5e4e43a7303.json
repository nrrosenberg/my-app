{"ast":null,"code":"'use strict';\n\nvar isFunction = require('lodash/isFunction');\n\nvar _mapValues = require('lodash/mapValues');\n\nvar SerializerUtils = require('./serializer-utils');\n\nmodule.exports = function (collectionName, records, opts) {\n  this.serialize = function (records) {\n    var that = this;\n    var payload = {};\n\n    function getLinks(links) {\n      return _mapValues(links, function (value) {\n        if (isFunction(value)) {\n          return value(records);\n        } else {\n          return value;\n        }\n      });\n    }\n\n    function collection() {\n      payload.data = [];\n      records.forEach(function (record) {\n        var serializerUtils = new SerializerUtils(that.collectionName, record, payload, that.opts);\n        payload.data.push(serializerUtils.perform());\n      });\n      return payload;\n    }\n\n    function resource() {\n      payload.data = new SerializerUtils(that.collectionName, records, payload, that.opts).perform(records);\n      return payload;\n    }\n\n    if (that.opts.topLevelLinks) {\n      payload.links = getLinks(that.opts.topLevelLinks);\n    }\n\n    if (that.opts.meta) {\n      payload.meta = _mapValues(that.opts.meta, function (value) {\n        if (isFunction(value)) {\n          return value(records);\n        } else {\n          return value;\n        }\n      });\n    }\n\n    if (Array.isArray(records)) {\n      return collection(records);\n    } else {\n      return resource(records);\n    }\n  };\n\n  if (arguments.length === 3) {\n    // legacy behavior\n    this.collectionName = collectionName;\n    this.opts = opts;\n    return this.serialize(records);\n  } else {\n    // treat as a reusable serializer\n    this.collectionName = collectionName;\n    this.opts = records;\n  }\n};","map":{"version":3,"sources":["/Users/nicorosenberg/Desktop/grupo-belicooo/my-app/node_modules/jsonapi-serializer/lib/serializer.js"],"names":["isFunction","require","_mapValues","SerializerUtils","module","exports","collectionName","records","opts","serialize","that","payload","getLinks","links","value","collection","data","forEach","record","serializerUtils","push","perform","resource","topLevelLinks","meta","Array","isArray","arguments","length"],"mappings":"AAAA;;AACA,IAAIA,UAAU,GAAGC,OAAO,CAAC,mBAAD,CAAxB;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,kBAAD,CAAxB;;AACA,IAAIE,eAAe,GAAGF,OAAO,CAAC,oBAAD,CAA7B;;AAEAG,MAAM,CAACC,OAAP,GAAiB,UAAUC,cAAV,EAA0BC,OAA1B,EAAmCC,IAAnC,EAAyC;AACxD,OAAKC,SAAL,GAAiB,UAAUF,OAAV,EAAmB;AAClC,QAAIG,IAAI,GAAG,IAAX;AACA,QAAIC,OAAO,GAAG,EAAd;;AAEA,aAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,aAAOX,UAAU,CAACW,KAAD,EAAQ,UAAUC,KAAV,EAAiB;AACxC,YAAId,UAAU,CAACc,KAAD,CAAd,EAAuB;AACrB,iBAAOA,KAAK,CAACP,OAAD,CAAZ;AACD,SAFD,MAEO;AACL,iBAAOO,KAAP;AACD;AACF,OANgB,CAAjB;AAOD;;AAED,aAASC,UAAT,GAAsB;AACpBJ,MAAAA,OAAO,CAACK,IAAR,GAAe,EAAf;AAEAT,MAAAA,OAAO,CAACU,OAAR,CAAgB,UAAUC,MAAV,EAAkB;AAChC,YAAIC,eAAe,GAAG,IAAIhB,eAAJ,CAAoBO,IAAI,CAACJ,cAAzB,EAAyCY,MAAzC,EACpBP,OADoB,EACXD,IAAI,CAACF,IADM,CAAtB;AAEAG,QAAAA,OAAO,CAACK,IAAR,CAAaI,IAAb,CAAkBD,eAAe,CAACE,OAAhB,EAAlB;AACD,OAJD;AAMA,aAAOV,OAAP;AACD;;AAED,aAASW,QAAT,GAAoB;AAClBX,MAAAA,OAAO,CAACK,IAAR,GAAe,IAAIb,eAAJ,CAAoBO,IAAI,CAACJ,cAAzB,EAAyCC,OAAzC,EAAkDI,OAAlD,EACbD,IAAI,CAACF,IADQ,EACFa,OADE,CACMd,OADN,CAAf;AAGA,aAAOI,OAAP;AACD;;AAED,QAAID,IAAI,CAACF,IAAL,CAAUe,aAAd,EAA6B;AAC3BZ,MAAAA,OAAO,CAACE,KAAR,GAAgBD,QAAQ,CAACF,IAAI,CAACF,IAAL,CAAUe,aAAX,CAAxB;AACD;;AAED,QAAIb,IAAI,CAACF,IAAL,CAAUgB,IAAd,EAAoB;AAClBb,MAAAA,OAAO,CAACa,IAAR,GAAetB,UAAU,CAACQ,IAAI,CAACF,IAAL,CAAUgB,IAAX,EAAiB,UAAUV,KAAV,EAAiB;AACzD,YAAId,UAAU,CAACc,KAAD,CAAd,EAAuB;AACrB,iBAAOA,KAAK,CAACP,OAAD,CAAZ;AACD,SAFD,MAEO;AACL,iBAAOO,KAAP;AACD;AACF,OANwB,CAAzB;AAOD;;AAED,QAAIW,KAAK,CAACC,OAAN,CAAcnB,OAAd,CAAJ,EAA4B;AAC1B,aAAOQ,UAAU,CAACR,OAAD,CAAjB;AACD,KAFD,MAEO;AACL,aAAOe,QAAQ,CAACf,OAAD,CAAf;AACD;AACF,GApDD;;AAsDA,MAAIoB,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC1B;AACA,SAAKtB,cAAL,GAAsBA,cAAtB;AACA,SAAKE,IAAL,GAAYA,IAAZ;AACA,WAAO,KAAKC,SAAL,CAAeF,OAAf,CAAP;AACD,GALD,MAKO;AACL;AACA,SAAKD,cAAL,GAAsBA,cAAtB;AACA,SAAKE,IAAL,GAAYD,OAAZ;AACD;AACF,CAjED","sourcesContent":["'use strict';\nvar isFunction = require('lodash/isFunction');\nvar _mapValues = require('lodash/mapValues');\nvar SerializerUtils = require('./serializer-utils');\n\nmodule.exports = function (collectionName, records, opts) {\n  this.serialize = function (records) {\n    var that = this;\n    var payload = {};\n\n    function getLinks(links) {\n      return _mapValues(links, function (value) {\n        if (isFunction(value)) {\n          return value(records);\n        } else {\n          return value;\n        }\n      });\n    }\n\n    function collection() {\n      payload.data = [];\n\n      records.forEach(function (record) {\n        var serializerUtils = new SerializerUtils(that.collectionName, record,\n          payload, that.opts);\n        payload.data.push(serializerUtils.perform());\n      });\n\n      return payload;\n    }\n\n    function resource() {\n      payload.data = new SerializerUtils(that.collectionName, records, payload,\n        that.opts).perform(records);\n\n      return payload;\n    }\n\n    if (that.opts.topLevelLinks) {\n      payload.links = getLinks(that.opts.topLevelLinks);\n    }\n\n    if (that.opts.meta) {\n      payload.meta = _mapValues(that.opts.meta, function (value) {\n        if (isFunction(value)) {\n          return value(records);\n        } else {\n          return value;\n        }\n      });\n    }\n\n    if (Array.isArray(records)) {\n      return collection(records);\n    } else {\n      return resource(records);\n    }\n  };\n\n  if (arguments.length === 3) {\n    // legacy behavior\n    this.collectionName = collectionName;\n    this.opts = opts;\n    return this.serialize(records);\n  } else {\n    // treat as a reusable serializer\n    this.collectionName = collectionName;\n    this.opts = records;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}